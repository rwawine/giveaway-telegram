"""
–ß–µ—Å—Ç–Ω—ã–π —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
"""

import hashlib
import random
import logging
from datetime import datetime
from typing import Dict, Optional

import requests

logger = logging.getLogger(__name__)


def get_hash_seed() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç hash-seed –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞ Bitcoin –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω—Ç—Ä–æ–ø–∏–∏
    –í —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    
    Returns:
        str: –•–µ—à-—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ seed
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞ Bitcoin
        response = requests.get(
            'https://api.blockchain.info/q/latesthash',
            timeout=5
        )
        
        if response.status_code == 200:
            block_hash = response.text.strip()
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö–µ—à Bitcoin –±–ª–æ–∫–∞: {block_hash}")
            return block_hash
            
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –±–ª–æ–∫–∞ Bitcoin: {e}")
    
    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    fallback_seed = datetime.now().strftime("%Y-%m-%d-%H")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback seed: {fallback_seed}")
    return fallback_seed


def generate_random_number(max_value: int, seed: str = None) -> int:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ max_value
    
    Args:
        max_value: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        seed: Seed –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    
    Returns:
        int: –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ max_value
    """
    if seed is None:
        seed = get_hash_seed()
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –∏–∑ —Å—Ç—Ä–æ–∫–∏
    hash_object = hashlib.sha256(seed.encode())
    numeric_seed = int(hash_object.hexdigest(), 16) % (2**32)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º seed –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
    rng = random.Random(numeric_seed)
    return rng.randint(1, max_value)


def create_winner_announcement(winner: Dict, total_participants: int, seed: str = None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    
    Args:
        winner: –î–∞–Ω–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        total_participants: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        seed: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π seed
    
    Returns:
        str: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if seed is None:
        seed = get_hash_seed()
    
    winner_number = generate_random_number(total_participants, seed)
    
    message = f"""
üéä **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–û–ó–´–ì–†–´–®–ê** üéä

üëë **–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner['name']}
üßæ **–ö–∞—Ä—Ç–∞:** ****{(winner.get('loyalty_card_number') or '')[-4:]}
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {winner['phone_number']}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:**
‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}
‚Ä¢ –ù–æ–º–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {winner_number}

üîç **–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏:**
‚Ä¢ Hash-seed: `{seed}`
‚Ä¢ –í—Ä–µ–º—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

*–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π hash-seed*
"""
    
    return message


def verify_randomizer(seed: str, total_participants: int, expected_winner_number: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
    
    Args:
        seed: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π seed
        total_participants: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        expected_winner_number: –û–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    
    Returns:
        bool: True –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    """
    try:
        actual_number = generate_random_number(total_participants, seed)
        return actual_number == expected_winner_number
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞: {e}")
        return False
