"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞
"""

import logging
import os
import threading
from typing import Optional
from concurrent.futures import ThreadPoolExecutor

import telebot
from telebot.types import Message, CallbackQuery, Contact

from config import (
    BOT_TOKEN, ADMIN_IDS, MESSAGES, KEYBOARD_BUTTONS, SUPPORT_MESSAGES, get_web_base_url,
    BROADCAST_RATE_PER_SEC, BROADCAST_MAX_RETRIES, BROADCAST_RETRY_BASE_DELAY
)
from database.db_manager import (
    save_application, application_exists, get_all_applications,
    get_random_winner, get_winner, get_applications_stats, get_applications_count,
    create_support_ticket, get_support_ticket, reply_support_ticket,
    get_open_support_tickets
)
from bot.keyboards import (
    get_main_keyboard, get_phone_keyboard, get_back_keyboard,
    get_admin_keyboard, get_winner_confirmation_keyboard, get_export_format_keyboard
)
from bot.states import (
    UserState, set_user_state, get_user_state, clear_user_state,
    set_user_data, get_user_data
)
from utils.file_handler import save_photo, export_to_csv, export_to_excel
from utils.image_validation import analyze_leaflet
from utils.anti_fraud import AntiFraudSystem, sha256_hex
from utils.randomizer import create_winner_announcement, get_hash_seed

logger = logging.getLogger(__name__)

# –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
registration_executor = ThreadPoolExecutor(max_workers=10, thread_name_prefix="RegWorker")
RUNTIME_ADMINS = set()  # –ê–¥–º–∏–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–Ω—Ç–∞–π–º–µ


def validate_phone_number(phone: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω: –ë–µ–ª–∞—Ä—É—Å—å (+375), –†–æ—Å—Å–∏—è (+7), –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (+77)"""
    if not phone:
        return False, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
    clean_phone = phone.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –¥–æ–±–∞–≤–ª—è–µ–º
    if not clean_phone.startswith('+'):
        clean_phone = '+' + clean_phone
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞–º —Å—Ç—Ä–∞–Ω
    if clean_phone.startswith('+375'):
        # –ë–µ–ª–∞—Ä—É—Å—å: +375 XX XXX-XX-XX (–≤—Å–µ–≥–æ 13 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(clean_phone) != 13 or not clean_phone[4:].isdigit():
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ë–µ–ª–∞—Ä—É—Å–∏. –§–æ—Ä–º–∞—Ç: +375XXXXXXXXX"
        return True, clean_phone
        
    elif clean_phone.startswith('+77'):
        # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω: +77 XXX XXX XX XX (–≤—Å–µ–≥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(clean_phone) != 12 or not clean_phone[3:].isdigit():
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –§–æ—Ä–º–∞—Ç: +77XXXXXXXXX"
        return True, clean_phone
        
    elif clean_phone.startswith('+7'):
        # –†–æ—Å—Å–∏—è: +7 XXX XXX-XX-XX (–≤—Å–µ–≥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(clean_phone) != 12 or not clean_phone[2:].isdigit():
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –†–æ—Å—Å–∏–∏. –§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX"
        return True, clean_phone
    
    else:
        return False, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞:\nüáßüáæ –ë–µ–ª–∞—Ä—É—Å–∏ (+375)\nüá∑üá∫ –†–æ—Å—Å–∏–∏ (+7)\nüá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ (+77)"


def validate_username(username: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç username - —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã"""
    if not username:
        return False, "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    clean_username = username.lstrip('@')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    if len(clean_username) < 3:
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
    
    if len(clean_username) > 32:
        return False, "–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    import re
    if not re.match(r'^[a-zA-Z][a-zA-Z0-9_]*$', clean_username):
        return False, "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω:\n‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –±—É–∫–≤—ã\n‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _\n‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"
    
    return True, clean_username


def create_bot() -> telebot.TeleBot:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    bot = telebot.TeleBot(BOT_TOKEN, threaded=True, num_threads=8)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    
    @bot.message_handler(commands=['start'])
    def handle_start(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∞–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—è–≤–∫—É
            if application_exists(user_id):
                bot.send_message(
                    message.chat.id,
                    MESSAGES['already_applied'],
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
            is_admin_user = is_admin(user_id)
            bot.send_message(
                message.chat.id,
                MESSAGES['welcome'],
                reply_markup=get_main_keyboard(is_admin_user),
                parse_mode='Markdown'
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    @bot.message_handler(commands=['support'])
    def handle_support_command(message: Message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /support"""
        try:
            user_id = message.from_user.id
            set_user_state(user_id, UserState.WAITING_SUPPORT_MESSAGE)
            logger.info(f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª /support")
            bot.send_message(
                message.chat.id,
                SUPPORT_MESSAGES['support_start'],
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_support_command: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    
    @bot.message_handler(commands=['admin'])
    def handle_admin(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        try:
            user_id = message.from_user.id
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if not is_admin(user_id):
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ")
                bot.send_message(message.chat.id, MESSAGES['admin_not_authorized'])
                return
            
            # –§–∏–∫—Å–∏—Ä—É–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ runtime-–∞–¥–º–∏–Ω–∞ (–¥–ª—è –∫–æ–ª–±–µ–∫–æ–≤/–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π)
            RUNTIME_ADMINS.add(user_id)
            
            stats = get_applications_stats()
            admin_text = f"üëë **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_applications']}"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            bot.send_message(
                message.chat.id,
                admin_text,
                reply_markup=get_admin_keyboard(),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    
    
    
    @bot.message_handler(func=lambda message: message.text and message.text.startswith('/reply_'))
    def handle_reply_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reply_X –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            user_id = message.from_user.id
            
            if not is_admin(user_id):
                bot.send_message(message.chat.id, MESSAGES['admin_not_authorized'])
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            command_text = message.text
            ticket_id = int(command_text.replace('/reply_', ''))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
            ticket = get_support_ticket(ticket_id)
            if not ticket:
                bot.send_message(message.chat.id, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
            set_user_state(user_id, UserState.WAITING_ADMIN_REPLY)
            set_user_data(user_id, 'reply_ticket_id', ticket_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            reply_prompt = SUPPORT_MESSAGES['support_reply_prompt'].format(
                ticket_id=ticket_id,
                user_name=ticket['user_name'],
                username=ticket['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω',
                message=ticket['message']
            )
            
            bot.send_message(
                message.chat.id,
                reply_prompt,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reply_command: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    
    @bot.message_handler(commands=['—Å–ø–∏—Å–æ–∫'])
    def handle_list_applications(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—Å–ø–∏—Å–æ–∫"""
        try:
            user_id = message.from_user.id
            
            if not is_admin(user_id):
                bot.send_message(message.chat.id, MESSAGES['admin_not_authorized'])
                return
            
            applications = get_all_applications()
            
            if not applications:
                bot.send_message(message.chat.id, MESSAGES['no_applications'])
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
            text = "üìã **–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:**\n\n"
            for i, app in enumerate(applications, 1):
                winner_mark = "üëë " if app['is_winner'] else ""
                text += f"{i}. {winner_mark}{app['name']} (@{app['telegram_username']})\n"
                text += f"   üìû {app['phone_number']}\n"
                text += f"   üïê {app['timestamp']}\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç—è–º–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(text) > 4000:
                parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
                for part in parts:
                    bot.send_message(message.chat.id, part, parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, text, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_list_applications: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    
    @bot.message_handler(commands=['–≤—ã–±—Ä–∞—Ç—å_–ø–æ–±–µ–¥–∏—Ç–µ–ª—è'])
    def handle_select_winner(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–≤—ã–±—Ä–∞—Ç—å_–ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        try:
            user_id = message.from_user.id
            
            if not is_admin(user_id):
                bot.send_message(message.chat.id, MESSAGES['admin_not_authorized'])
                return
            
            applications = get_all_applications()
            
            if not applications:
                bot.send_message(message.chat.id, MESSAGES['no_applications'])
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner = get_random_winner()
            if not winner:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
                return
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
            announcement = create_winner_announcement(
                winner, len(applications), get_hash_seed()
            )
            
            bot.send_message(
                message.chat.id,
                announcement,
                reply_markup=get_winner_confirmation_keyboard(),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_select_winner: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    
    @bot.message_handler(commands=['—ç–∫—Å–ø–æ—Ä—Ç'])
    def handle_export(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—ç–∫—Å–ø–æ—Ä—Ç"""
        try:
            user_id = message.from_user.id
            
            if not is_admin(user_id):
                bot.send_message(message.chat.id, MESSAGES['admin_not_authorized'])
                return
            
            bot.send_message(
                message.chat.id,
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                reply_markup=get_export_format_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_export: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    
    @bot.message_handler(content_types=['text'])
    def handle_text_messages(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = message.from_user.id
            text = message.text
            state = get_user_state(user_id)
            logger.info(f"TEXT msg from {user_id}: state={state}, text={text}")
            
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if text == KEYBOARD_BUTTONS['apply']:
                start_application_process(bot, message)
            elif text == KEYBOARD_BUTTONS['status']:
                handle_status_check(bot, message)
            elif text == KEYBOARD_BUTTONS['about']:
                handle_about_contest(bot, message)
            elif text == KEYBOARD_BUTTONS['help']:
                # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                set_user_state(user_id, UserState.WAITING_SUPPORT_MESSAGE)
                logger.info(f"–ö–ª–∏–∫: {user_id} –Ω–∞–∂–∞–ª '{KEYBOARD_BUTTONS['help']}'")
                bot.send_message(
                    message.chat.id,
                    MESSAGES['support_message_prompt'],
                    parse_mode='Markdown'
                )
            elif text == KEYBOARD_BUTTONS['back']:
                handle_back_button(bot, message)
            elif text == KEYBOARD_BUTTONS['cancel']:
                handle_cancel_button(bot, message)
            elif text == KEYBOARD_BUTTONS['admin_panel'] and is_admin(user_id):
                logger.info(f"–ö–ª–∏–∫: {user_id} –Ω–∞–∂–∞–ª '{KEYBOARD_BUTTONS['admin_panel']}'")
                handle_admin(message)
            
            # –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
            elif state == UserState.WAITING_NAME:
                handle_name_input(bot, message)
            elif state == UserState.WAITING_PHONE:
                handle_phone_input(bot, message)
            elif state == UserState.WAITING_USERNAME:
                handle_username_input(bot, message)
            elif state == UserState.WAITING_SUPPORT_MESSAGE:
                logger.info(f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: –ø—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}")
                handle_support_message_input(bot, message)
            elif state == UserState.WAITING_ADMIN_REPLY:
                logger.info(f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: –∞–¥–º–∏–Ω {user_id} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç")
                handle_admin_reply_input(bot, message)
            elif state == UserState.WAITING_BROADCAST_MESSAGE:
                # –ê–¥–º–∏–Ω –≤–≤–µ–ª —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
                target = get_user_data(user_id, 'broadcast_target') or 'all'
                text_to_send = (message.text or '').strip()
                if not text_to_send:
                    bot.send_message(message.chat.id, "‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                    return
                
                try:
                    if target == 'all':
                        applications = get_all_applications()
                        success_count = 0
                        import time
                        interval = max(0.04, 1.0 / max(1, BROADCAST_RATE_PER_SEC))
                        for app in applications:
                            retries = 0
                            while retries <= BROADCAST_MAX_RETRIES:
                                try:
                                    bot.send_message(app['telegram_id'], text_to_send)
                                    success_count += 1
                                    break
                                except telebot.apihelper.ApiTelegramException as e:
                                    # Flood/Too Many Requests/backoff
                                    if 'Too Many Requests' in str(e) or e.error_code == 429:
                                        delay = BROADCAST_RETRY_BASE_DELAY * (2 ** retries)
                                        time.sleep(delay)
                                        retries += 1
                                        continue
                                    elif e.error_code in (403, 400):
                                        # Blocked by user / bad request ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                                        break
                                    else:
                                        break
                                except Exception:
                                    break
                            time.sleep(interval)
                        bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {success_count}/{len(applications)}")
                    elif target == 'winner':
                        winner = get_winner()
                        if not winner:
                            bot.send_message(message.chat.id, "‚ùå –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                        else:
                            try:
                                bot.send_message(winner['telegram_id'], text_to_send)
                                bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                            except Exception:
                                bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é")
                finally:
                    clear_user_state(user_id)
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                bot.send_message(
                    message.chat.id,
                    "ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                    reply_markup=get_main_keyboard()
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_messages: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    
    @bot.message_handler(content_types=['contact'])
    def handle_contact(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            user_id = message.from_user.id
            state = get_user_state(user_id)
            
            if state == UserState.WAITING_PHONE:
                contact: Contact = message.contact
                logger.info(f"üì± –ü–û–õ–£–ß–ï–ù –ö–û–ù–¢–ê–ö–¢ –æ—Ç TG_ID {user_id}")
                
                if contact.user_id == user_id:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç
                    phone_number = contact.phone_number
                    if not phone_number.startswith('+'):
                        phone_number = '+' + phone_number
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    is_valid, result_or_error = validate_phone_number(phone_number)
                    
                    if not is_valid:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {phone_number}")
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå {result_or_error}"
                        )
                        return
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
                    phone_number = result_or_error
                    logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –≤–∞–ª–∏–¥–µ–Ω: {phone_number}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
                    if application_exists(user_id, phone_number):
                        logger.warning(f"‚ö†Ô∏è –ù–æ–º–µ—Ä {phone_number} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                        bot.send_message(
                            message.chat.id,
                            "‚ùå –ó–∞—è–≤–∫–∞ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                        )
                        return
                    
                    set_user_data(user_id, 'phone_number', phone_number)
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                    set_user_state(user_id, UserState.WAITING_USERNAME)
                    bot.send_message(
                        message.chat.id,
                        MESSAGES['ask_username'],
                        reply_markup=get_back_keyboard()
                    )
                    logger.info(f"üìù –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É username –¥–ª—è TG_ID {user_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ß—É–∂–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç TG_ID {user_id}")
                    bot.send_message(
                        message.chat.id,
                        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    "ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                    reply_markup=get_main_keyboard()
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_contact: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    
    @bot.message_handler(content_types=['photo'])
    def handle_photo(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            user_id = message.from_user.id
            state = get_user_state(user_id)
            
            if state == UserState.WAITING_PHOTO:
                process_photo_submission(bot, message)
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                if state == UserState.WAITING_NAME:
                    error_msg = ("‚ùå **–§–û–¢–û –ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ú –®–ê–ì–ï!**\n\n"
                               "üìù **–®–ê–ì 1:** –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\n"
                               "üì± –®–∞–≥ 2: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                               "üë§ –®–∞–≥ 3: –õ–æ–≥–∏–Ω\n"
                               "üì∏ –®–∞–≥ 4: –§–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞\n\n"
                               "üí° –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!")
                elif state == UserState.WAITING_PHONE:
                    error_msg = ("‚ùå **–§–û–¢–û –ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ú –®–ê–ì–ï!**\n\n"
                               "‚úÖ –®–∞–≥ 1: –ò–º—è ‚úì\n"
                               "üì± **–®–ê–ì 2:** –°–µ–π—á–∞—Å –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                               "üë§ –®–∞–≥ 3: –õ–æ–≥–∏–Ω\n"
                               "üì∏ –®–∞–≥ 4: –§–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞\n\n"
                               "üí° –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
                elif state == UserState.WAITING_USERNAME:
                    error_msg = ("‚ùå **–§–û–¢–û –ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ú –®–ê–ì–ï!**\n\n"
                               "‚úÖ –®–∞–≥ 1: –ò–º—è ‚úì\n"
                               "‚úÖ –®–∞–≥ 2: –¢–µ–ª–µ—Ñ–æ–Ω ‚úì\n"
                               "üë§ **–®–ê–ì 3:** –°–µ–π—á–∞—Å –Ω—É–∂–µ–Ω –≤–∞—à –ª–æ–≥–∏–Ω\n"
                               "üì∏ –®–∞–≥ 4: –§–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞\n\n"
                               "üí° –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username!")
                else:
                    error_msg = ("‚ùå **–ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –§–û–¢–û–ì–†–ê–§–ò–Ø!**\n\n"
                               "ü§î –§–æ—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 4-–º —à–∞–≥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
                               "–ù–∞–∂–º–∏—Ç–µ \"üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å\" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                
                bot.send_message(
                    message.chat.id,
                    error_msg,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo: {e}")
            bot.send_message(message.chat.id, MESSAGES['error'])
    
    
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_queries(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
        try:
            user_id = call.from_user.id
            data = call.data
            logger.info(f"Callback from {user_id}: {data}")
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
            try:
                bot.answer_callback_query(call.id)
            except Exception:
                pass
            
            if not is_admin(user_id):
                logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                try:
                    bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                except Exception:
                    pass
                return
            
            # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
            if data == "admin_stats":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> admin_stats")
                handle_admin_stats_callback(bot, call)
            elif data == "admin_export":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> admin_export")
                handle_admin_export_callback(bot, call)
            elif data == "admin_broadcast":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> admin_broadcast")
                handle_admin_broadcast_callback(bot, call)
            elif data == "admin_support":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> admin_support")
                handle_admin_support_callback(bot, call)
            elif data == "admin_web_info":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> admin_web_info")
                handle_admin_web_info_callback(bot, call)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            elif data == "confirm_winner":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> confirm_winner")
                handle_confirm_winner_callback(bot, call)
            elif data == "select_new_winner":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> select_new_winner")
                handle_select_new_winner_callback(bot, call)
            elif data == "cancel_winner":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> cancel_winner")
                handle_cancel_winner_callback(bot, call)
            
            # –≠–∫—Å–ø–æ—Ä—Ç
            elif data == "export_csv":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> export_csv")
                handle_export_csv_callback(bot, call)
            elif data == "export_excel":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> export_excel")
                handle_export_excel_callback(bot, call)
            
            # –†–∞—Å—Å—ã–ª–∫–∞
            elif data.startswith("broadcast_"):
                logger.info(f"–ö–ª–∏–∫: {user_id} -> {data}")
                handle_broadcast_action(bot, call)
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –¥–µ–π—Å—Ç–≤–∏—è
            elif data.startswith("support_reply_"):
                handle_admin_support_reply_action(bot, call)
            elif data.startswith("support_close_"):
                handle_admin_support_close_action(bot, call)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            elif data == "settings_clear_apps":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> settings_clear_apps")
                handle_settings_clear_apps(bot, call)
            elif data == "settings_system_info":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> settings_system_info")
                handle_settings_system_info(bot, call)
            elif data == "settings_open_tickets":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> settings_open_tickets")
                handle_settings_open_tickets(bot, call)
            elif data == "settings_close_tickets":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> settings_close_tickets")
                handle_settings_close_tickets(bot, call)
            elif data == "settings_confirm_clear":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> settings_confirm_clear")
                handle_settings_confirm_clear(bot, call)
            elif data == "settings_confirm_close_tickets":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> settings_confirm_close_tickets")
                handle_settings_confirm_close_tickets(bot, call)
            elif data == "settings_back":
                logger.info(f"–ö–ª–∏–∫: {user_id} -> settings_back")
                # –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–µ–Ω—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –∏–∑–±–µ–≥–∞–µ–º 400
                try:
                    stats = get_applications_stats()
                    admin_text = f"üëë **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_applications']}"
                    if call.message.text != admin_text:
                        bot.edit_message_text(
                            admin_text,
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=get_admin_keyboard(),
                            parse_mode='Markdown'
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥: {e}")
            
            
            # –°—Ç–∞—Ä—ã–µ callback'–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            elif data == "admin_list":
                handle_admin_users_callback(bot, call)
            
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback_queries: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    
    return bot


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return (user_id in ADMIN_IDS) or (user_id in RUNTIME_ADMINS)


def start_application_process(bot: telebot.TeleBot, message: Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    user_id = message.from_user.id
    logger.info(f"üéØ –ö–õ–ò–ö –£–ß–ê–°–¢–í–û–í–ê–¢–¨ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TG_ID: {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—è–≤–∫—É
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è TG_ID: {user_id}")
    if application_exists(user_id):
        logger.warning(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è TG_ID: {user_id}")
        bot.send_message(
            message.chat.id,
            MESSAGES['already_applied'],
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    logger.info(f"‚úÖ –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è TG_ID: {user_id}")
    set_user_state(user_id, UserState.WAITING_NAME)
    bot.send_message(
        message.chat.id,
        MESSAGES['application_start'],
        reply_markup=get_back_keyboard()
    )
    logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ –∏–º—è –¥–ª—è TG_ID: {user_id}")


def handle_name_input(bot: telebot.TeleBot, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏"""
    user_id = message.from_user.id
    name = message.text.strip()
    
    if len(name) < 2:
        bot.send_message(message.chat.id, "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    set_user_data(user_id, 'name', name)
    set_user_state(user_id, UserState.WAITING_PHONE)
    
    bot.send_message(
        message.chat.id,
        MESSAGES['ask_phone'],
        reply_markup=get_phone_keyboard()
    )


def handle_phone_input(bot: telebot.TeleBot, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
    if text == KEYBOARD_BUTTONS['enter_manual']:
        bot.send_message(
            message.chat.id,
            "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\nüí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–æ–º–µ—Ä–∞:\nüáßüáæ –ë–µ–ª–∞—Ä—É—Å–∏: +375291234567\nüá∑üá∫ –†–æ—Å—Å–∏–∏: +79001234567\nüá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞: +77001234567",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    is_valid, result_or_error = validate_phone_number(text)
    
    if not is_valid:
        bot.send_message(message.chat.id, f"‚ùå {result_or_error}")
        return
    
    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    phone = result_or_error
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
    if application_exists(user_id, phone):
        bot.send_message(
            message.chat.id,
            "‚ùå –ó–∞—è–≤–∫–∞ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
        return
    
    set_user_data(user_id, 'phone_number', phone)
    set_user_state(user_id, UserState.WAITING_USERNAME)
    
    bot.send_message(
        message.chat.id,
        MESSAGES['ask_username'],
        reply_markup=get_back_keyboard()
    )


def handle_username_input(bot: telebot.TeleBot, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ username"""
    user_id = message.from_user.id
    username = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª username, –±–µ—Ä–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    if not username and message.from_user.username:
        username = message.from_user.username
    
    # –ï—Å–ª–∏ username –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π, —Ç—Ä–µ–±—É–µ–º –≤–≤–µ—Å—Ç–∏
    if not username:
        bot.send_message(
            message.chat.id,
            "‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username:"
        )
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º username
    is_valid, result_or_error = validate_username(username)
    
    if not is_valid:
        bot.send_message(
            message.chat.id,
            f"‚ùå {result_or_error}\n\nüí° –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞: john_doe123"
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π username
    username = result_or_error
    
    set_user_data(user_id, 'telegram_username', username)
    set_user_state(user_id, UserState.WAITING_PHOTO)
    
    bot.send_message(
        message.chat.id,
        MESSAGES['ask_photo'],
        reply_markup=get_back_keyboard()
    )


def save_application_in_background(user_data: dict, user_id: int, photo_path: str, photo_hash: str):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        success = save_application(
            name=user_data['name'],
            phone_number=user_data['phone_number'],
            telegram_username=user_data.get('telegram_username', ''),
            telegram_id=user_id,
            photo_path=photo_path,
            photo_hash=photo_hash,
            risk_score=0,
            risk_level='low',
            risk_details='{}',
            status='approved',
            leaflet_status='approved',
            stickers_count=0,
            validation_notes='{}',
            manual_review_required=0,
            photo_phash=''
        )
        
        if success:
            logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logger.warning(f"–ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ–Ω–µ: {e}")


def process_photo_submission_async(bot: telebot.TeleBot, message: Message, user_id: int, photo_file: bytes, photo_path: str, photo_hash: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user_data(user_id)
        if not user_data:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω—Ç–∏—Ñ—Ä–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –±—ã—Å—Ç—Ä–æ - –º–∏–Ω–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫
        import json as _json
        success = save_application(
            name=user_data['name'],
            phone_number=user_data['phone_number'],
            telegram_username=user_data.get('telegram_username', ''),
            telegram_id=user_id,
            photo_path=photo_path,
            photo_hash=photo_hash,
            risk_score=0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            risk_level='low',
            risk_details='{}',  # –ü—É—Å—Ç—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            status='approved',  # –í—Å–µ–≥–¥–∞ –æ–¥–æ–±—Ä—è–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            leaflet_status='approved',  # –í—Å–µ–≥–¥–∞ –æ–¥–æ–±—Ä—è–µ–º
            stickers_count=0,
            validation_notes='{}',
            manual_review_required=0,
            photo_phash=''
        )
        
        if success:
            is_admin_user = is_admin(user_id)
            success_message = MESSAGES['application_success'].format(user_id=user_id)
            bot.send_message(
                message.chat.id,
                success_message,
                reply_markup=get_main_keyboard(is_admin_user),
                parse_mode='Markdown'
            )
            logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            is_admin_user = is_admin(user_id)
            bot.send_message(
                message.chat.id,
                "‚ùå **–ó–ê–Ø–í–ö–ê –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢**\n\n‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã",
                reply_markup=get_main_keyboard(is_admin_user),
                parse_mode='Markdown'
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        clear_user_state(user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        try:
            bot.send_message(message.chat.id, MESSAGES['error'])
        except:
            pass


def process_photo_submission(bot: telebot.TeleBot, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—è–≤–∫—É –±—ã—Å—Ç—Ä–æ"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º –º–µ–Ω—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        photo = message.photo[0] if len(message.photo) > 0 else message.photo[-1]
        file_info = bot.get_file(photo.file_id)
        photo_file = bot.download_file(file_info.file_path)
        
        # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        photo_path = save_photo(photo_file, user_id)
        
        # –ë—ã—Å—Ç—Ä—ã–π —Ö–µ—à (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 1000 –±–∞–π—Ç –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        photo_hash = sha256_hex(photo_file[:1000] if len(photo_file) > 1000 else photo_file)
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_data = get_user_data(user_id)
        if user_data:
            is_admin_user = is_admin(user_id)
            success_message = MESSAGES['application_success'].format(user_id=user_id)
            bot.send_message(
                message.chat.id,
                success_message,
                reply_markup=get_main_keyboard(is_admin_user),
                parse_mode='Markdown'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
            clear_user_state(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            registration_executor.submit(
                save_application_in_background,
                user_data, user_id, photo_path, photo_hash
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        try:
            bot.send_message(message.chat.id, MESSAGES['error'])
        except:
            pass


def handle_back_button(bot: telebot.TeleBot, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" """
    user_id = message.from_user.id
    clear_user_state(user_id)
    
    bot.send_message(
        message.chat.id,
        "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )


def send_help_message(bot: telebot.TeleBot, message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    is_admin_user = is_admin(user_id)
    
    bot.send_message(
        message.chat.id, 
        MESSAGES['help_message'], 
        parse_mode='Markdown',
        reply_markup=get_main_keyboard(is_admin_user)
    )


def handle_status_check(bot: telebot.TeleBot, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user_id = message.from_user.id
    is_admin_user = is_admin(user_id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞
        if not application_exists(user_id):
            bot.send_message(
                message.chat.id,
                "üìã **–°–¢–ê–¢–£–° –ù–ï –ù–ê–ô–î–ï–ù**\n\n‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É\nüéØ –ù–∞–∂–º–∏—Ç–µ \"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å\" –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                reply_markup=get_main_keyboard(is_admin_user),
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        applications = get_all_applications()
        user_app = next((app for app in applications if app['telegram_id'] == user_id), None)
        
        if user_app:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            from datetime import datetime
            try:
                # –ï—Å–ª–∏ timestamp —É–∂–µ –æ–±—ä–µ–∫—Ç datetime (–¥–ª—è DuckDB)
                if isinstance(user_app['timestamp'], datetime):
                    date_obj = user_app['timestamp']
                else:
                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ (–¥–ª—è SQLite)
                    date_obj = datetime.fromisoformat(user_app['timestamp'].replace('Z', '+00:00'))
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: DD.MM.YYYY HH:MM
                formatted_date = date_obj.strftime("%d.%m.%Y %H:%M")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {user_app['timestamp']}: {e}")
                # Fallback - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 16 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                try:
                    fallback_str = str(user_app['timestamp'])[:16]
                    if len(fallback_str) >= 16:
                        formatted_date = fallback_str.replace('T', ' ')
                    else:
                        formatted_date = str(user_app['timestamp'])
                except:
                    formatted_date = "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º participant_number –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ id –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            participant_number = user_app.get('participant_number') or user_app['id']

            status_text = MESSAGES['status_check'].format(
                user_id=participant_number,
                date=formatted_date
            )
            
            bot.send_message(
                message.chat.id,
                status_text,
                reply_markup=get_main_keyboard(is_admin_user),
                parse_mode='Markdown'
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=get_main_keyboard(is_admin_user)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_status_check: {e}")
        bot.send_message(message.chat.id, MESSAGES['error'])


def handle_about_contest(bot: telebot.TeleBot, message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
    user_id = message.from_user.id
    is_admin_user = is_admin(user_id)
    
    about_text = """üìñ **–û –†–û–ó–´–ì–†–´–®–ï**

üéØ **–ß—Ç–æ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º:**
–ö—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã –¥–ª—è –Ω–∞—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!

üé≤ **–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à:**
‚Ä¢ –ß–µ—Å—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –†–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üìã **–ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è:**
‚Ä¢ –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞
‚Ä¢ –ë—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º

üèÜ **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:**
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ö–µ—à–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç–∏.

‚ú® –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º! ‚ú®"""
    
    bot.send_message(
        message.chat.id,
        about_text,
        reply_markup=get_main_keyboard(is_admin_user),
        parse_mode='Markdown'
    )



def handle_cancel_button(bot: telebot.TeleBot, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã"""
    user_id = message.from_user.id
    is_admin_user = is_admin(user_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clear_user_state(user_id)
    
    bot.send_message(
        message.chat.id,
        "‚ùå **–û–ü–ï–†–ê–¶–ò–Ø –û–¢–ú–ï–ù–ï–ù–ê**\n\nüè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(is_admin_user),
        parse_mode='Markdown'
    )


# –ù–æ–≤—ã–µ callback handlers –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
def handle_admin_users_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    applications = get_all_applications()
    
    if not applications:
        bot.edit_message_text(
            "üìã **–£–ß–ê–°–¢–ù–ò–ö–ò**\n\nü§∑‚Äç‚ôÇÔ∏è –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    text = f"üë• **–£–ß–ê–°–¢–ù–ò–ö–ò ({len(applications)})**\n\n"
    for i, app in enumerate(applications[:8], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
        winner_mark = "üëë " if app['is_winner'] else ""
        text += f"{i}. {winner_mark}**{app['name']}**\n"
        text += f"   üí¨ @{app['telegram_username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"   üì± {app['phone_number']}\n\n"
    
    if len(applications) > 8:
        text += f"... –∏ –µ—â–µ {len(applications) - 8} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
    
    text += "üåê –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –≤–µ–±-–∞–¥–º–∏–Ω–∫–µ"
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=get_admin_keyboard(),
        parse_mode='Markdown'
    )


def handle_admin_stats_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        total_count = get_applications_count()

        text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
        text += f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_count}"

        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {e}")
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )


def handle_admin_broadcast_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    broadcast_keyboard = InlineKeyboardMarkup()
    broadcast_keyboard.add(
        InlineKeyboardButton("üì¢ –í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data="broadcast_all"),
        InlineKeyboardButton("üèÜ –¢–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é", callback_data="broadcast_winner")
    )
    broadcast_keyboard.add(
        InlineKeyboardButton("üìã –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_test")
    )
    broadcast_keyboard.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="broadcast_back")
    )
    
    bot.edit_message_text(
        "üì® **–†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "üì¢ **–í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º** - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º\n"
        "üèÜ **–¢–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é** - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üìã **–¢–µ—Å—Ç–æ–≤–∞—è** - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=broadcast_keyboard,
        parse_mode='Markdown'
    )



def handle_admin_support_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
    tickets = get_open_support_tickets()

    if not tickets:
        bot.edit_message_text(
            "üÜò **–ü–û–î–î–ï–†–ñ–ö–ê**\n\n–û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–∏–∫–µ—Ç–æ–≤
    text = "üÜò **–ü–û–î–î–ï–†–ñ–ö–ê: –û–¢–ö–†–´–¢–´–ï –¢–ò–ö–ï–¢–´**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
    kb = InlineKeyboardMarkup(row_width=2)
    for ticket in tickets[:5]:
        text += f"#{ticket['id']} ‚Ä¢ {ticket['user_name']} ‚Ä¢ {ticket['created_at']}\n"
        text += f"üí¨ {ticket['message'][:60]}{'...' if len(ticket['message'])>60 else ''}\n\n"
        kb.add(
            InlineKeyboardButton(f"‚úâÔ∏è –û—Ç–≤–µ—Ç #{ticket['id']}", callback_data=f"support_reply_{ticket['id']}"),
            InlineKeyboardButton(f"‚úÖ –ó–∞–∫—Ä—ã—Ç—å #{ticket['id']}", callback_data=f"support_close_{ticket['id']}")
        )

    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))

    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=kb,
        parse_mode='Markdown'
    )


def handle_admin_support_reply_action(bot: telebot.TeleBot, call: CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞"""
    try:
        user_id = call.from_user.id
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤")
            return

        ticket_id = int(call.data.replace('support_reply_', ''))
        ticket = get_support_ticket(ticket_id)
        if not ticket:
            bot.answer_callback_query(call.id, "–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        set_user_state(user_id, UserState.WAITING_ADMIN_REPLY)
        set_user_data(user_id, 'reply_ticket_id', ticket_id)

        reply_prompt = SUPPORT_MESSAGES['support_reply_prompt'].format(
            ticket_id=ticket_id,
            user_name=ticket['user_name'],
            username=ticket['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω',
            message=ticket['message']
        )

        bot.edit_message_text(
            reply_prompt,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        bot.answer_callback_query(call.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ support reply action: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")


def handle_admin_support_close_action(bot: telebot.TeleBot, call: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç –±–µ–∑ –æ—Ç–≤–µ—Ç–∞"""
    try:
        user_id = call.from_user.id
        if not is_admin(user_id):
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤")
            return

        ticket_id = int(call.data.replace('support_close_', ''))
        ok = reply_support_ticket(ticket_id, admin_reply='')
        if not ok:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å")
            return

        bot.answer_callback_query(call.id, f"–¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç")
        # –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
        handle_admin_support_callback(bot, call)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ support close action: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")

def handle_broadcast_action(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    action = call.data.replace("broadcast_", "")
    
    if action == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é
        count = get_applications_count()
        admin_text = f"üëë **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {count}"
        
        bot.edit_message_text(
            admin_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    try:
        applications = get_all_applications()
        
        if action == "all":
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
            set_user_state(call.from_user.id, UserState.WAITING_BROADCAST_MESSAGE)
            set_user_data(call.from_user.id, 'broadcast_target', 'all')
            bot.edit_message_text(
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:",
                call.message.chat.id,
                call.message.message_id
            )
            return
            
        elif action == "winner":
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
            set_user_state(call.from_user.id, UserState.WAITING_BROADCAST_MESSAGE)
            set_user_data(call.from_user.id, 'broadcast_target', 'winner')
            bot.edit_message_text(
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é:",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        elif action == "test":
            # –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω—É
            test_message = """üìã **–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï**

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–Ω–∞"""
            
            bot.send_message(
                call.from_user.id,
                test_message,
                parse_mode='Markdown'
            )
            result_text = "‚úÖ **–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù**\n\n–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º –≤ –õ–°"

        elif action == "winner":
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
            set_user_state(call.from_user.id, UserState.WAITING_BROADCAST_MESSAGE)
            set_user_data(call.from_user.id, 'broadcast_target', 'winner')
            bot.edit_message_text(
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é:",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        bot.edit_message_text(
            result_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        bot.edit_message_text(
            "‚ùå **–û–®–ò–ë–ö–ê –†–ê–°–°–´–õ–ö–ò**\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )


def handle_settings_action(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    action = call.data.replace("settings_", "")
    
    if action == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é
        count = get_applications_count()
        admin_text = f"üëë **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {count}"
        
        bot.edit_message_text(
            admin_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    elif action == "reset_winner":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        try:
            from database.db_manager import get_db_connection
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE applications SET is_winner = 0')
                conn.commit()
            
            bot.edit_message_text(
                "‚úÖ **–ü–û–ë–ï–î–ò–¢–ï–õ–¨ –°–ë–†–û–®–ï–ù**\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω.\n–ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_admin_keyboard(),
                parse_mode='Markdown'
            )
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {call.from_user.id} —Å–±—Ä–æ—Å–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
            bot.edit_message_text(
                "‚ùå **–û–®–ò–ë–ö–ê**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_admin_keyboard(),
                parse_mode='Markdown'
            )
    elif action == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        count = get_applications_count()
        admin_text = f"üëë **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {count}"
        bot.edit_message_text(
            admin_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )
    
    elif action == "clear_apps":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∑–∞—è–≤–æ–∫
        from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        confirm_keyboard = InlineKeyboardMarkup()
        confirm_keyboard.add(
            InlineKeyboardButton("‚ö†Ô∏è –î–ê, –£–î–ê–õ–ò–¢–¨ –í–°–ï", callback_data="settings_confirm_clear"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_back")
        )
        
        applications_count = get_applications_count()
        bot.edit_message_text(
            f"‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–î–ò–¢–ï –£–î–ê–õ–ï–ù–ò–ï**\n\n"
            f"–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –∑–∞—è–≤–∫–∏ ({applications_count} —à—Ç.)\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=confirm_keyboard,
            parse_mode='Markdown'
        )
    
    elif action == "confirm_clear":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞—è–≤–æ–∫
        try:
            from database.db_manager import get_db_connection
            import os
            import glob
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('DELETE FROM applications')
                conn.commit()
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo_files = glob.glob('photos/user_*.jpg')
            deleted_photos = 0
            for photo_file in photo_files:
                try:
                    os.remove(photo_file)
                    deleted_photos += 1
                except:
                    continue
            
            bot.edit_message_text(
                f"‚úÖ **–û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {get_applications_count() if False else '–≤—Å–µ'}\n"
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {deleted_photos}\n\n"
                f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_admin_keyboard(),
                parse_mode='Markdown'
            )
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {call.from_user.id} –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ –∑–∞—è–≤–∫–∏")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞—è–≤–æ–∫: {e}")
            bot.edit_message_text(
                "‚ùå **–û–®–ò–ë–ö–ê**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_admin_keyboard(),
                parse_mode='Markdown'
            )
    elif action == "cancel_clear":
        # –û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏
        count = get_applications_count()
        admin_text = f"üëë **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {count}"
        bot.edit_message_text(
            admin_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )
    
    elif action == "export_logs":
        # –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
        try:
            import zipfile
            from datetime import datetime
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            zip_filename = f"exports/logs_{timestamp}.zip"
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –ª–æ–≥–∞–º–∏
            with zipfile.ZipFile(zip_filename, 'w') as zipf:
                if os.path.exists('bot.log'):
                    zipf.write('bot.log', 'bot.log')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤)
                config_info = f"""–°–∏—Å—Ç–µ–º–∞: Telegram Bot –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
–í—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().isoformat()}
–í–µ—Ä—Å–∏—è: 2.0
–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {get_applications_count()}
–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {'–û–ø—Ä–µ–¥–µ–ª–µ–Ω' if get_winner() else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
"""
                zipf.writestr('system_info.txt', config_info)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
            with open(zip_filename, 'rb') as zip_file:
                bot.send_document(
                    call.message.chat.id,
                    zip_file,
                    caption="üìä **–≠–ö–°–ü–û–†–¢ –õ–û–ì–û–í**\n\n–ê—Ä—Ö–∏–≤ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
                    parse_mode='Markdown'
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(zip_filename)
            
            bot.edit_message_text(
                "‚úÖ **–õ–û–ì–ò –≠–ö–°–ü–û–†–¢–ò–†–û–í–ê–ù–´**\n\n–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_admin_keyboard(),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–æ–≥–æ–≤: {e}")
            bot.edit_message_text(
                "‚ùå **–û–®–ò–ë–ö–ê**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_admin_keyboard(),
                parse_mode='Markdown'
            )
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        count = get_applications_count()
        admin_text = f"üëë **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {count}"
        bot.edit_message_text(
            admin_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )


    # –ö–æ–Ω–µ—Ü handle_settings_action

    
def handle_support_message_input(bot: telebot.TeleBot, message: Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç"""
    try:
        user_id = message.from_user.id
        text = (message.text or '').strip()
        if not text:
            bot.send_message(message.chat.id, "‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º.")
            return

        ticket_id = create_support_ticket(
            user_id=user_id,
            user_name=f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip(),
            username=message.from_user.username or '',
            message=text
        )

        if not ticket_id:
            bot.send_message(message.chat.id, MESSAGES['error'])
            return

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            SUPPORT_MESSAGES['support_sent'].format(ticket_id=ticket_id),
            parse_mode='Markdown'
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        from datetime import datetime as _dt
        admin_text = SUPPORT_MESSAGES['admin_support_new'].format(
            ticket_id=ticket_id,
            user_name=f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip(),
            username=message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω',
            user_id=user_id,
            timestamp=_dt.now().strftime('%d.%m.%Y %H:%M'),
            message=text
        )
        # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
        all_admins = set(ADMIN_IDS) | set(RUNTIME_ADMINS)
        for admin_id in all_admins:
            try:
                bot.send_message(admin_id, admin_text, parse_mode='Markdown')
            except Exception:
                continue

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        clear_user_state(user_id)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_support_message_input: {e}")
        bot.send_message(message.chat.id, MESSAGES['error'])


def handle_admin_reply_input(bot: telebot.TeleBot, message: Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ —Ç–∏–∫–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        user_id = message.from_user.id
        if not is_admin(user_id):
            bot.send_message(message.chat.id, MESSAGES['admin_not_authorized'])
            clear_user_state(user_id)
            return

        reply_text = (message.text or '').strip()
        if not reply_text:
            bot.send_message(message.chat.id, "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.")
            return

        ticket_id = get_user_data(user_id, 'reply_ticket_id')
        if not ticket_id:
            bot.send_message(message.chat.id, MESSAGES['error'])
            clear_user_state(user_id)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        ok = reply_support_ticket(ticket_id, reply_text)
        if not ok:
            bot.send_message(message.chat.id, MESSAGES['error'])
            clear_user_state(user_id)
            return

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
        ticket = get_support_ticket(ticket_id)
        if not ticket:
            bot.send_message(message.chat.id, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            clear_user_state(user_id)
            return

        try:
            bot.send_message(
                ticket['user_id'],
                f"üí¨ **–û–¢–í–ï–¢ –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò**\n\n{reply_text}",
                parse_mode='Markdown'
            )
        except Exception:
            pass

        bot.send_message(message.chat.id, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–∏–∫–µ—Ç #{ticket_id})")
        clear_user_state(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_reply_input: {e}")
        bot.send_message(message.chat.id, MESSAGES['error'])

def handle_admin_web_info_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±-–∞–¥–º–∏–Ω–∫–µ"""
    base_url = get_web_base_url()
    bot.edit_message_text(
        "üåê **–í–ï–ë-–ê–î–ú–ò–ù–ö–ê**\n\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
        f"üîó `{base_url}`\n\n"
        "üîê **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=get_admin_keyboard(),
        parse_mode='Markdown'
    )


def handle_settings_clear_apps(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞—è–≤–æ–∫"""
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="settings_confirm_clear"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_cancel_clear")
    )

    bot.edit_message_text(
        "‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø**\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞—è–≤–∫–∏?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=confirm_keyboard,
        parse_mode='Markdown'
    )


def handle_settings_system_info(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    import os
    import sys
    from datetime import datetime

    total_count = get_applications_count()
    bot_info = bot.get_me()

    text = f"üìä **–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n"
    text += f"ü§ñ **–ë–æ—Ç:** @{bot_info.username}\n"
    text += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {total_count}\n"
    text += f"üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üìÅ **–ü–∞–ø–∫–∞:** {os.getcwd()}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    try:
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
        )


def handle_settings_open_tickets(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
    tickets = get_open_support_tickets()

    if not tickets:
        text = "üìã **–û–¢–ö–†–´–¢–´–ï –¢–ò–ö–ï–¢–´**\n\n‚úÖ –í—Å–µ —Ç–∏–∫–µ—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã"
    else:
        text = f"üìã **–û–¢–ö–†–´–¢–´–ï –¢–ò–ö–ï–¢–´ ({len(tickets)})**\n\n"
        for i, ticket in enumerate(tickets[:5], 1):
            text += f"{i}. #{ticket['id']} –æ—Ç {ticket['user_name']}\n"
            text += f"   üí¨ {ticket['message'][:50]}{'...' if len(ticket['message']) > 50 else ''}\n\n"

        if len(tickets) > 5:
            text += f"... –∏ –µ—â–µ {len(tickets) - 5} —Ç–∏–∫–µ—Ç–æ–≤\n"

    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=get_admin_keyboard(),
        parse_mode='Markdown'
    )


def handle_settings_close_tickets(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.add(
        InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ", callback_data="settings_confirm_close_tickets"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_cancel_close_tickets")
    )

    tickets = get_open_support_tickets()
    count = len(tickets)

    bot.edit_message_text(
        f"üÜò **–ó–ê–ö–†–´–¢–ò–ï –¢–ò–ö–ï–¢–û–í**\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ {count} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n\n"
        "–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏?",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=confirm_keyboard,
        parse_mode='Markdown'
    )


def handle_settings_confirm_clear(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞—è–≤–æ–∫"""
    from database.db_manager import DatabaseManager

    try:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        db = DatabaseManager()
        db.cursor.execute("DELETE FROM applications")
        db.connection.commit()
        db.close()

        logger.warning(f"–ê–¥–º–∏–Ω {call.from_user.id} –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ –∑–∞—è–≤–∫–∏")

        bot.edit_message_text(
            "üóë **–ó–ê–Ø–í–ö–ò –£–î–ê–õ–ï–ù–´**\n\n"
            "–í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n"
            "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞—è–≤–æ–∫: {e}")
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )


def handle_settings_confirm_close_tickets(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤"""
    from database.db_manager import DatabaseManager

    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
        db = DatabaseManager()
        db.cursor.execute("""
            UPDATE support_tickets
            SET status = 'closed', replied_at = datetime('now')
            WHERE status = 'open'
        """)
        db.connection.commit()
        db.close()

        logger.info(f"–ê–¥–º–∏–Ω {call.from_user.id} –∑–∞–∫—Ä—ã–ª –≤—Å–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

        bot.edit_message_text(
            "‚úÖ **–¢–ò–ö–ï–¢–´ –ó–ê–ö–†–´–¢–´**\n\n"
            "–í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard(),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: {e}")
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )


# –°—Ç–∞—Ä—ã–µ callback handlers –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def handle_admin_list_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã /—Å–ø–∏—Å–æ–∫
    applications = get_all_applications()
    
    if not applications:
        bot.edit_message_text(
            MESSAGES['no_applications'],
            call.message.chat.id,
            call.message.message_id
        )
        return
    
    text = "üìã **–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:**\n\n"
    for i, app in enumerate(applications[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        winner_mark = "üëë " if app['is_winner'] else ""
        text += f"{i}. {winner_mark}{app['name']} (@{app['telegram_username']})\n"
    
    if len(applications) > 10:
        text += f"\n... –∏ –µ—â–µ {len(applications) - 10} –∑–∞—è–≤–æ–∫"
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=get_admin_keyboard(),
        parse_mode='Markdown'
    )


def handle_admin_winner_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∫–µ"""
    applications = get_all_applications()
    
    if not applications:
        bot.edit_message_text(
            MESSAGES['no_applications'],
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )
        return
    winner = get_random_winner()
    if not winner:
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )
        return
    
    announcement = create_winner_announcement(
        winner, len(applications), get_hash_seed()
    )
    
    bot.edit_message_text(
        announcement,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=get_winner_confirmation_keyboard(),
        parse_mode='Markdown'
    )


def handle_admin_export_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

    export_keyboard = InlineKeyboardMarkup()
    export_keyboard.add(
        InlineKeyboardButton("üìÑ CSV", callback_data="export_csv"),
        InlineKeyboardButton("üìä Excel", callback_data="export_excel")
    )

    bot.edit_message_text(
        "üì• **–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n\n"
        "üìÑ **CSV** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
        "üìä **Excel** - –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=export_keyboard,
        parse_mode='Markdown'
    )


def handle_confirm_winner_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    winner = get_winner()
    if winner:
        text = f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {winner['name']} (@{winner['telegram_username']})"
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )
    else:
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )


def handle_select_new_winner_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    handle_admin_winner_callback(bot, call)


def handle_cancel_winner_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    count = get_applications_count()
    admin_text = f"üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {count}"
    
    bot.edit_message_text(
        admin_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=get_admin_keyboard(),
        parse_mode='Markdown'
    )


def handle_export_csv_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV"""
    try:
        applications = get_all_applications()
        file_path = export_to_csv(applications)
        
        with open(file_path, 'rb') as file:
            bot.send_document(call.message.chat.id, file)
        
        bot.edit_message_text(
            MESSAGES['export_ready'],
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: {e}")
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )


def handle_export_excel_callback(bot: telebot.TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel"""
    try:
        applications = get_all_applications()
        file_path = export_to_excel(applications)
        
        with open(file_path, 'rb') as file:
            bot.send_document(call.message.chat.id, file)
        
        bot.edit_message_text(
            MESSAGES['export_ready'],
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel: {e}")
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_admin_keyboard()
        )
